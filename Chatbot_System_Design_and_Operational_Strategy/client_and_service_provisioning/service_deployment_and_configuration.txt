Main Feature: Client and Service Provisioning
Feature Block:
   - Service Deployment and Configuration
========================================================

first when a new client comes, make whole pipeline in such way, what steps will be, use case pipeline in such way, how we will deploy them, their knowledge base in which format can be, initially knowledge base how to ingest, sub-section updates will be, in all cases check, they give packed bands, okay, okay, okay, okay, okay, from where marshal is, their chats in form, but I expect that someone’s doc will be Google Doc, someone’s Word, someone’s PDF, so I can also transcribe, for us, all things same, we can see what we will get, like some documents and structured comments, and in our system there will be mechanism to upload in multiple documents and convert to co-fax, okay, in this Excel chat cannot happen, yes, in this Excel chat cannot happen, so our backend will do all the work, chat will be like some parsed, and documents will be seen, but one thing in my mind can happen, your thing, that some docs are dropped, but I also, one done step, in it manual may be, so to make it easy, we write multi-sent, that Excel data, send to person, we have sent to client, took it, if Excel support not given, suppose, because in which format will Excel be, exactly its interpretation, why in Excel we said sorry, people maintain in Excel sometimes, and that data for entry fee and it was given by Reki, it happened like that, design complete, so tell that Excel also important, so we say no, whatever raw data you give, you have to give in this form, or this document is Word, you have to fill, whatever position not listed, till what we can do, majority cases can do, what we expect that majority client side, definitely client side, meaning first client exception, that they say I have nothing, I will give chats, then say no, I cannot give chats either, that is overhead, listen on our chats, okay, so even on event chats, listening feature also exists, okay, we will listen, we broad set give, we say... We say that Excel, all this is not necessary that we integrate as-is and implement, therefore support we will put in backend, we will say we will do it in re-requirements that yes, this Excel PDF/text/meeting transcript, whatever Google backup, everything, support easily, basically we are registering data, so our chat docs in it, see registered, that general registration of our application, chat docs, they register at high abstract or channel level, not very specific structured semi, I would rather say fully structured, because structured data, you have deterministic, that category is, that not to put in case opinion initially, so we get structured information, whatever structure comes, then we can also put in opinion as we like, we have to put, yes exactly, first we need to make comprehensive type facts, frequent here ask question, which unstructured data is, we also have structured data, in it chunking we do not need to do, just like that, right, when facts go forward, then the answer will come, it is better or simple, then its pre-concerns, we will do support for all, we may also integrate some from it, in way like Merhab, pivot word, at least the text and listening inside chat board, we don’t know, tech also can cast it, in which we inspire it and it will listen, your mosque, mutual says, it listens secretly, context out is like that, it says, we can extract bulk export, if we had to give, bulk export way, no, okay, we checked, so we did research, I did not see myself, so some way we can extract, see if we start now, for three months listen, what comes to us from past six months or year, can extract, very insightful, it has seen full season, all seasons, means 365 days cycle, it saw, from that my belief, we can get very good insights, so we do a parallel activity on it, keep other assets. The system we are building is single-tenant, not multi-tenant. They may have two or three tenants, two or three different services; each tenant has one master. Multi-tenancy: multiple knowledge bases exist but a unique deployment. Escalation and related processes follow a fixed guideline; the user understands. Even if it’s single-tenant, we have to consider maximum services per tenant. That’s business: we set limits and charge accordingly. The service may have limits: maximum instances it can serve, each with a master service, a second service, a third, etc. They can adjust or scale it; our cause grows with that. For now, we can set constraints based on members. We decide how many integrations can be done, who can handle which instances. The system will transparently manage escalations, constraints, and service assignments.