Main Feature: Client and Service Provisioning
Feature Block:
   -- Chat Data Processing
========================================

their chats in form, but I expect that someone’s doc will be Google Doc, someone’s Word, someone’s PDF, so I can also transcribe, for us, all things same, we can see what we will get, like some documents and structured comments, and in our system there will be mechanism to upload in multiple documents and convert to co-fax, okay, in this Excel chat cannot happen, yes, in this Excel chat cannot happen, so our backend will do all the work, chat will be like some parsed, and documents will be seen, but one thing in my mind can happen, your thing, that some docs are dropped, but I also, one done step, in it manual may be, so to make it easy, we write multi-sent, that Excel data, send to person, we have sent to client, took it, if Excel support not given, suppose, because in which format will Excel be, exactly its interpretation, why in Excel we said sorry, people maintain in Excel sometimes, and that data for entry fee and it was given by Reki, it happened like that, design complete, so tell that Excel also important, so we say no, whatever raw data you give, you have to give in this form, or this document is Word, you have to fill, whatever position not listed, till what we can do, majority cases can do, what we expect that majority client side, definitely client side, meaning first client exception, that they say I have nothing, I will give chats, then say no, I cannot give chats either, that is overhead, listen on our chats, okay, so even on event chats, listening feature also exists, okay, we will listen, we broad set give, we say...
We say that Excel, all this is not necessary that we integrate as-is and implement, therefore support we will put in backend, we will say we will do it in re-requirements that yes, this Excel PDF/text/meeting transcript, whatever Google backup, everything, support easily, basically we are registering data, so our chat docs in it, see registered, that general registration of our application, chat docs, they register at high abstract or channel level, not very specific structured semi, I would rather say fully structured, because structured data, you have deterministic, that category is, that not to put in case opinion initially, so we get structured information, whatever structure comes, then we can also put in opinion as we like, we have to put, yes exactly, first we need to make comprehensive type facts, frequent here ask question, which unstructured data is, we also have structured data, in it chunking we do not need to do, just like that, right, when facts go forward, then the answer will come, it is better or simple, then its pre-concerns, we will do support for all, we may also integrate some from it, in way like Merhab, pivot word, at least the text and listening inside chat board, we don’t know, tech also can cast it, in which we inspire it and it will listen, your mosque, mutual says, it listens secretly, context out is like that, it says, we can extract bulk export, if we had to give, bulk export way, no, okay, we checked, so we did research, I did not see myself, so some way we can extract, see if we start now, for three months listen, what comes to us from past six months or year, can extract, very insightful, it has seen full season, all seasons, means 365 days cycle, it saw, from that my belief, we can get very good insights, so we do a parallel activity on it, keep other assets.
But my suggestion is, if we can poll selectively, just poll selectively, will not trouble them much, that this is a human, we will not disturb much, that’s it, right, good API, I was seeing, it said, for API, you can extract messages up to six months, backup also option, yes, so our own, we saw, if we integrate with them, business account, why not make API account, I also will, it is fine, we get access to a business account, so differently, we can poll its name, does it have a business account, will that be ok, that they share with us, all chats of this account go into ours, they go, number not change, yes, correct, can share from right, mobile full backup happens, if they with mobile, share backup only, then in ours single backup comes, they do not want to set one, do not set, I will, they will poll the case, generally, what does WhatsApp say, I don’t know, it does not tell, API app what read, you told, but WhatsApp generally says, we do not keep your messages, basically they only keep messages for transfer, really all messages where are, iCloud, only two told, API app, if in your Google Drive backup, share the files backed up, in this way, normally on Android, when thinking from old phone, first I support, one file comes out, that file I then do myself, so from single file, whole backup done, if such people show, your file, we manage in maintenance, all data, from it, also tells that your data, should be in file, then it is clear, so option we will give and explain, same that we will listen also.
We will listen, but all your seasons’ data is in it, so we will get old data from it, then we will have to filter it out, yes, then we will have to, we were told that old data was mixing with our responses, there was such face information in it, for old semester separated, for new separated, data will not be lost, it will grow big, in it intent or whatever system we have to make, we will know, that some questions are every 3 months, every 6 months, whose answers should be, this is precisely we need to see, this dynamic information, it will become automatic through LLM, absolutely through LLM, we do not have to supervise it, its precise thing is that these questions, their answer we need to fetch, because rates are, they fetch some questions’ answer, data master we have, whole data, if someone wants to do, but dynamic, someone easily wants, and dynamic also shows in Excel, exactly, if any master updates any of these, then it should have an interface, give them option on interface, in it could be that we have some acts in the system, that basically business how runs, we will know what we have, but some information or expects they need to feed, if they need to feed, yes, give them a form on dashboard, which fills from our data piece and displays, they update, and when update, press a push button, it goes, converts to embed, and updates old embed again, ok, this information we need, through function calling, what things we should not do, no, through function calling, meaning, what we need, we need that at this time, whatever a particular course rate is, in our database in one place, this defined function exists, and it will not be too many functions, 20-30-40 facts, which over time change, dynamic things we need in DB, things which we tell it, that which information you need, it will tell, also it will provide, also in training form how we do in DB, for persistence attach in memory, further max types, discuss, one is text message, one is audio message, images, some last, there requirement was that when user pressed high, we message, that this pressed route, then with images, etc., designed posters, we can say yes, we posted it, brochures, if here I posted a lot, then keep posting repeatedly, this is exactly, Oscar, if I say, for my one ORD and one ART, then only that should go, it is not that, this is its theoretical, many things, this second phase, no, ok, initial is that system enter will be, what we need to do first, initially our static information will remain, dynamic information which we expect, say, 25 or 40 cases expected, which will be dynamic content, then from DB fetch, ok, and function calling mechanism, tools, those are tools, ok, ok, ok, one or two things done, ingestion full discussion done, just one thought, any ambiguity remains, ok, ok, now whatever on testing per client, whatever prompt comes, it determines intent, some goes to right owner, some I respond from my knowledge, to say hello, its inner logic is inner tool, ok, obviously it is hello response, for your new helpers etc., where knowledge base Q&A comes, if similarity score very low, then it escalates to human, and if repeated attempt fails, it escalates to human, the intent is taken that it has been understood, we have metric timing, yes, we are not satisfied, if escalates to human, now...
These things, this logic, right now is kind of hard to follow, but it is our intervention-related thing. We made a prototype for you, yes, we made it. We have done quite a few factor similarity scores on top, but we made the full prototype. How this is going, this intervention recognition is going in this way. We made a flow diagram for it. It was made, you made it, good scripting pointer, and uploaded in one role. Uploaded in it. Can it also give us web server links? But we will have to poll. Initially, we say that as your rates get updated, update the responsibility infusion in your database. In the next phase, we will definitely commit this too, but the thing is, we can scrape and fetch latest rates ourselves, latest attempts, because this is scheduled, public schedule, which exam’s schedule is wanted. Another thing, which information we have registered in the FAX, which is also server-side, we need to make protocol for them that they review their respective information individually. But questions get lost. I had given a scheduler, my August, my papers’ exam scheduler given, August passed, name came, but exam given. But the data is present, data is present. August passed, music if done, rest is late, came to us. When we say data has arrived, because function comes in application, we can trigger it manually. Exactly, the reminders and fallback to human escalation, both will push, so human gets so many queries, they will answer. Update us what human is doing.
We also define escalation lightly. In escalation, chatbot’s reward, meaning we just forward to someone. Forwarded mainly because we initiate chat ourselves. For this, the template messages will need to be approved by us. This process can have 2-3, maybe 4 terms. Ok, now in this scenario, human gets it, human will deal with it. We will reply and forward, which is complex, full in front. Basically, it is a client-to-player question: what kind of experience they want. Where does this transparency come from? We record it, we are recording it, node records something. So, when chat board replies back, from user’s perspective, it can be completely transparent. User waits, waits, if after one hour human replies, then user gets one reply. But there will be scenarios where chat board may be helpless, human intervention is needed. For example, if image comes like a payment. They did payment, we said it’s retail work. They sent image confirming payment. Now, human access is not visible; someone has to verify. Then we need to tell them it is ok, received. Amount received, confirmed. If a question arises, human must consider it. But human escalation—what does it mean? Escalation to human: human doesn’t have different contact numbers; student communicates from same number. I remember they said we have WhatsApp login numbers, backup with them.
The humans will be sitting with WhatsApp sessions; they will be inside a group. They will escalate there. No, no, I get it. Look, the number we are replying from, the human also sees the same. Yes, they are replying. So, they can reply using the same WhatsApp Business account user interface. They are replying there. When we escalate, the human will not reply automatically until they themselves respond to the message. Until they give a human answer. Right, that’s how it is. So we also consider it in the same group. My question also came: account series and ongoing tasks. In the same group, my admin is also there. Admin is also there. I add one more admin and do it this way. No, no, we don’t want group conversation; API doesn’t support group conversation. It’s one-to-one, but one-to-one conversation is sensitive, known to the person. So, human escalations will be given enough points or information so the person can identify and act. Once they process, they will know. And in chat, I have to track and reach the chat where the discussion is happening. Right? Obviously, many users can come. One way is this. Another thought: should we have a separate dashboard for escalations? To know how many escalations happened. In one day, attended users. Same came, same came. I also received, many came to the group. No, no, they have a number, and they do one-to-one messages. Suppose your number, I send a message; the person comes for payment. Now the chatbot gets an image: “I have made payment.” Ok. I cannot verify myself because I don’t have account access. They have account number. They check and confirm: “Yes, money received from X.” They will say yes.
Also, they have an online account portal, they activate it. “Ok, I got a receipt. Is it payment confirmed?” I had the accountant number; they forward on that number or send text/WhatsApp. But they notify: go to dashboard for human escalation. I created a separate category for human escalation: 10 messages, escalated by human. They address these 10, so no need to go to WhatsApp. They will log in on laptop to WhatsApp business account, search chat, and reply from there. Full view of escalations from dashboard. Reason: otherwise, person would manually search chat from laptop and reply. API should know the context: if already replied, small poll in chat session tracks who replied. The dashboard user is replying via API. When they click, API forwards the message: “Yes, message received, payment verified.” Each client may have multiple numbers; if a client has four numbers, e.g., in the company, each stream is...
We can give it a name like Stream One, because it won’t always be subject-based; it will be under the company, like this is the ID, this is Operations, this is so-and-so, this is Support, Generator Team, Generator Support Team, Proctor Support Team. So, in your service workflow, when a user sends a receipt, you verify it and reply. Okay, now how complicated will this be? If they say that we don’t want to handle it through the software interface but want it on WhatsApp and it’s coming according to my timing, or they are not in the office, queries might come at night, queries come. The one who escalates will be the admin we are not. The tickets, right, they are on us, so we will have to see them. Tickets normally exist; first, they go to the assigned human, who might have two or three contacts, and the tickets can be assigned to them. They will pick it up, so they can go to our app, or if we build our own app, or they can go on the web. It’s not feasible for all. Just for user convenience, when we discussed, they can go there. Let’s say they go there, tap on it, then we process it on the web, show it on the website, with the proper label and convenience. One way is just like the old setup, they go in our app, handle it there, respond, okay, it gets verified, right. Yes, absolutely. Another way is that we can forward the information, like images we received, forward them to that channel, and indicate that this message came from that number, so they can search it, and the information will be applied from WhatsApp itself. They will handle it from WhatsApp. At our end, they handle it on the dashboard. The messages they send will trigger notifications. Notifications are not checked but can be tracked; messages we didn’t dispatch, someone else dispatched, if WhatsApp receives it, it goes there. If a person messages that number, I sent the message.
See, your WhatsApp, your WhatsApp mobile also receives it. When you send a message to someone, that message will not appear on your end. Maybe it comes from outside; check if your WhatsApp is logged in there. If not, the API can poll it. If applied, it will apply; if applied, it will block. If it blocks, then wait. Once it comes, apply and block it. Another option could be that they say, WhatsApp charged me, and I reply to the WhatsApp charged message; this is the reality. It’s very complicated. I tell you why it’s complicated: let’s say 3–4 complaints are gathered, we have to tell the user to select that chat and respond to it, support one-to-one escalation. That will be difficult. It can’t be done with them; it would be cluttered, so we will choose. One small thing: keep in mind that the WhatsApp Business Account gets updated; these few things, BSPs (Business Solution Providers) say, they provide on their Meta web service. This is in my solution providers queue; this is the cap, shipped 365 days, so for five thousand active users maximum, we had calculated. It can handle with them, and what happens at twenty thousand? That’s another big complexity.
Now, about human escalation: some things will occur that cannot be forwarded with images or such. There might be questions that must be answered by a human. The human will respond, and it will become part of that subthread; the human takes ownership. Yes, this will be the takeover. What happens is that if escalation occurs and there’s a ticket, what happens to that ticket? Yes, the escalation gets closed, then the chatbot takes back control. Until this is done, if a ticket has been generated, after generating the ticket, should the chatbot continue to handle it alongside? My point is that until the person who received the escalation…
Until the person addresses it in our system that the escalation has been closed, the chatbot should not go back to respond on the messages because it’s messy. Yes, it shouldn’t respond; I also think it shouldn’t respond. It will just wait, completely waiting. But one scenario could happen where something else comes that our bot can handle. So until the escalation is closed, the bot will keep the state. This is a good question, multiple questions, which I am passing; we can handle this. It could be that for a particular user, we are managing multiple sessions; the bot might think, “Brother…” but it will keep the threads in memory. It gets complicated: whenever an escalation comes, all the information is temporarily stored. We can say that in VBAN we discard it. Yes, in VBAN I think this is too much. If a requirement comes, then we’ll see. Suppose the requirement is that someone wants to verify a payment, check a paper, its deadline, we can fetch it ourselves from there. This is a very good case, so we will reply. If we reply, it means our dashboard merges multiple sessions in memory, showing which questions it’s answering at that time. In 95% of cases, I always consider a single thread; context thinking won’t allow splitting: one for a payment, another context comes next. We have to think about context. This won’t stop us from maintaining all contexts in our IB. If we pass each query individually, a query in escalation might not fit in one context; there could be three. Check your mechanisms. Yes, yes, could be ten. We tell the support person. My friend could also give many suggestions. On MUTO, like in Maple, they are structuring it; the next will be generic. If our app intelligently handles sessions or threads, we treat threads independently, and then identify what the user’s question is. We have to properly TBV (track, bind, verify) it.
However, in edge behavior, it remains. For threads, we have identification: we pick that thread. All our discussions will happen. Also, some human escalations, we will explicitly determine: as they said, “I want to talk to a person.” I have to connect them to a person. They are continuously sending messages, we have to understand what they are asking, but we may not be able to answer. Some data we don’t have understanding of; we need to transcribe and understand it to reply. Audio, yes, we need to handle; minutes should be considered. Audio: I mean the data coming, we need to have our mechanism for the received data, what action to take. Do we need direct human escalation? If an image comes, we view it and escalate if needed. Maybe the human shouldn’t intervene, but we need to determine which human gets it assigned. Could be one, two, or three, with different timings. This is a very good feature: assign back, timing-based. Then if escalation occurs and no reply comes within an hour, two hours, or certain minutes, and someone else needs to respond, we have to separately track this module. But overall, we should estimate how many escalation attempts there will be. Another thing: escalation randomization, maybe 24-hour window. Suppose a human is on duty; we’ve assumed we picked the window, from this time to that time…
Suppose six hours, these six hours, this child ward has done this. What has he done? He has to inform us; we don’t need to tell him why the shift was required. Look, they will be escalators; I’ll tell the reason why we are informing them. I also say eight hours, eight hours. It’s a single number, number one. I say, “Who are the humans? How many humans are there?” We have to assign a fallback number in the service packaging. If anyone is available in a shift, they will handle it. There are two shifts, 16 hours; it will escalate, and we will make it required. The backup: whenever we create a service, in DevOps terms, it’s called a “service” or “work unit.” Whenever we create a new service, it will respond on these interfaces. It will have an escalator, some parameters, a registered escalator, a fake escalator register, a full flow system. If a new client wants a new service, we spawn a new service. It will respond to that number; it will follow up. It will have a knowledge base, static and dynamic. When you check it, you can see the full data, review it, configure the dynamic knowledge base’s variety. By default, assume one entity, but it can be configured.
The system we are building is single-tenant, not multi-tenant. They may have two or three tenants, two or three different services; each tenant has one master. Multi-tenancy: multiple knowledge bases exist but a unique deployment. Escalation and related processes follow a fixed guideline; the user understands. Even if it’s single-tenant, we have to consider maximum services per tenant. That’s business: we set limits and charge accordingly. The service may have limits: maximum instances it can serve, each with a master service, a second service, a third, etc. They can adjust or scale it; our cause grows with that. For now, we can set constraints based on members. We decide how many integrations can be done, who can handle which instances. The system will transparently manage escalations, constraints, and service assignments.
Even internally, the system ensures transparency, independent operation, and escalator tracking. We can monitor, test, and manage the processes via dashboards independently. Testing is ongoing; the system is designed to handle these assignments efficiently, keeping track of users, sessions, and escalations without conflicts, while ensuring clarity in service handling and response.